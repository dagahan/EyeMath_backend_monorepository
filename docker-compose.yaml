name: eye-math


services:
  nginx:
    build:
      context: ./nginx
      dockerfile: dockerfile
    image: nginx-${COMPOSE_PROJECT_NAME}
    container_name: nginx-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./nginx


  gateway:
    build:
      context: ./gateway
      dockerfile: dockerfile
    image: gateway-${COMPOSE_PROJECT_NAME}
    container_name: gateway-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./gateway


  authorizer:
    build:
      context: ./authorizer
      dockerfile: dockerfile
    image: authorizer-${COMPOSE_PROJECT_NAME}
    container_name: authorizer-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${AUTHORIZER_PORT}:${AUTHORIZER_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


  recognizer:
    build: 
      context: ./recognizer
      dockerfile: dockerfile
    image: recognizer-${COMPOSE_PROJECT_NAME}
    container_name: recognizer-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${RECOGNIZER_PORT}:${RECOGNIZER_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
      - action: rebuild
        path: ./


  renderer:
    build: 
      context: ./renderer
      dockerfile: dockerfile
    image: renderer-${COMPOSE_PROJECT_NAME}
    container_name: renderer-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${RENDERER_PORT}:${RENDERER_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
      - action: rebuild
        path: ./


  solver:
    build:
      context: ./solver
      dockerfile: dockerfile
    image: solver-${COMPOSE_PROJECT_NAME}
    container_name: solver-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${SOLVER_PORT}:${SOLVER_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
      - action: rebuild
        path: ./


  valkey:
    build:
      context: ./valkey
      dockerfile: dockerfile
    image: valkey-${COMPOSE_PROJECT_NAME}
    container_name: valkey-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${VALKEY_PORT}:${VALKEY_PORT}"
    networks:
      - eye_math_network
    volumes:
      - ./valkey-data:/var/lib/valkey/data
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./

  
  postgres:
    build:
      context: ./postgres
      dockerfile: dockerfile
    image: postgres-${COMPOSE_PROJECT_NAME}
    container_name: postgres-${COMPOSE_PROJECT_NAME}
    env_file: .env
    environment:
      RUNNING_INSIDE_DOCKER: 1
      COMPOSE_PROJECT_NAME: ${COMPOSE_PROJECT_NAME}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - eye_math_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: ${DOCKER_CONTAINERS_RESTART}
    develop:
      watch:
        - action: rebuild
          path: ./


  # prometheus:
  #   build:
  #     context: ./prometheus
  #     dockerfile: dockerfile
  #   image: prometheus
  #   container_name: prometheus
  #   env_file: .env
  #   environment:
  #     RUNNING_INSIDE_DOCKER: 1
  #   ports:
  #     - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
  #   networks:
  #     - eye_math_network
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./prometheus-data:/prometheus
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #   restart: ${DOCKER_CONTAINERS_RESTART}
      # develop:
      #   watch:
      #   - action: rebuild
      #     path: ./


  # grafana:
  #   build:
  #     context: ./grafana
  #     dockerfile: dockerfile
  #   image: grafana
  #   container_name: grafana
  #   env_file: .env
  #   environment:
  #     RUNNING_INSIDE_DOCKER: 1
  #   ports:
  #     - "${GRAFANA_PORT}:${GRAFANA_PORT}"
  #   networks:
  #     - eye_math_network
  #   volumes:
  #     - ./grafana-data:/var/lib/grafana
  #   restart: ${DOCKER_CONTAINERS_RESTART}
      # develop:
      #   watch:
      #   - action: rebuild
      #     path: ./
    

volumes:
  postgres_data:
    driver: local

networks:
  eye_math_network:
    driver: bridge
    name: eye_math_network