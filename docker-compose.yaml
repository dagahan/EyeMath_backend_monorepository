x-env: &env_vars
  TZ: ${SYSTEM_TIME_ZONE}
  RUNNING_INSIDE_DOCKER: 1
  GATEWAY_HOST: ${GATEWAY_HOST}
  GATEWAY_APP_PORT: ${GATEWAY_APP_PORT}
  GATEWAY_GRPC_HOST: ${GATEWAY_GRPC_HOST}
  GATEWAY_GRPC_APP_PORT: ${GATEWAY_GRPC_APP_PORT}
  AUTHORIZER_HOST: ${AUTHORIZER_HOST}
  AUTHORIZER_APP_PORT: ${AUTHORIZER_APP_PORT}
  RECOGNIZER_HOST: ${RECOGNIZER_HOST}
  RECOGNIZER_APP_PORT: ${RECOGNIZER_APP_PORT}
  RENDERER_HOST: ${RENDERER_HOST}
  RENDERER_APP_PORT: ${RENDERER_APP_PORT}
  SOLVER_HOST: ${SOLVER_HOST}
  SOLVER_APP_PORT: ${SOLVER_APP_PORT}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_APP_PORT: ${POSTGRES_APP_PORT}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}


services:
  gateway:
    build: gateway
    container_name: gateway
    environment: *env_vars
    ports:
      - "${GATEWAY_APP_PORT}:${GATEWAY_APP_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}


  authorizer:
    build: authorizer
    container_name: authorizer
    environment: *env_vars
    ports:
      - "${AUTHORIZER_APP_PORT}:${AUTHORIZER_APP_PORT}"
    networks:
      - eye_math_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: ${DOCKER_CONTAINERS_RESTART}


  recognizer:
    build: recognizer
    container_name: recognizer
    environment: *env_vars
    ports:
      - "${RECOGNIZER_APP_PORT}:${RECOGNIZER_APP_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}


  renderer:
    build: renderer
    container_name: renderer
    environment: *env_vars
    ports:
      - "${RENDERER_APP_PORT}:${RENDERER_APP_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}


  solver:
    build: solver
    container_name: solver
    environment: *env_vars
    ports:
      - "${SOLVER_APP_PORT}:${SOLVER_APP_PORT}"
    networks:
      - eye_math_network
    restart: ${DOCKER_CONTAINERS_RESTART}

  
  postgres:
    build: postgres
    container_name: postgres
    environment: *env_vars
    ports:
      - "${POSTGRES_APP_PORT}:${POSTGRES_APP_PORT}"
    networks:
      - eye_math_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
      - ./postgres-data:/var/lib/postgresql/data
    command: 
      - bash
      - -c
      - |
        SQL_CONTENT=$$(cat /docker-entrypoint-initdb.d/init-template.sql)
        SQL_PROCESSED=$$(echo "$$SQL_CONTENT" | envsubst)
        echo "$$SQL_PROCESSED" > /docker-entrypoint-initdb.d/init.sql
        echo "Generated init.sql:"
        cat /docker-entrypoint-initdb.d/init.sql
        exec docker-entrypoint.sh postgres
    restart: ${DOCKER_CONTAINERS_RESTART}


  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   restart: on-failure


volumes:
  postgres_data:
    driver: local

networks:
  eye_math_network:
    driver: bridge
    name: eye_math_network